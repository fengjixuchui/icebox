stages:
  - build
  - virtualbox
  - deploy

variables:
  APT_UPDATE: apt-get update -qq -y
  APT_INSTALL: apt-get install -qq -y
  DISABLE_CLANG_FORMAT: "true"
  USER: user

build:gcc_linux:
  stage: build
  tags:
    - ubuntu
    - docker
  variables:
    CC: /usr/bin/gcc-8
    CXX: /usr/bin/g++-8
    TARGET: Ninja
  script:
    - $APT_UPDATE && $APT_INSTALL
        cmake
        g++-8
        gcc-8
        libpython3-dev
        ninja-build
        python3
        > /dev/null
    - cd build
    - ./configure.sh
    - cd ../out/x64
    - ninja

build:clang_linux:
  stage: build
  tags:
    - ubuntu
    - docker
  variables:
    CC: /usr/bin/clang-9
    CXX: /usr/bin/clang++-9
    CLANG_TIDY: /usr/bin/clang-tidy-9
    TARGET: Ninja
    USE_STATIC_ANALYZER: 1
  script:
    - $APT_UPDATE && $APT_INSTALL
        clang-9
        clang-tidy-9
        cmake
        libpython3-dev
        ninja-build
        python3
        > /dev/null
    - cd build
    - ./configure.sh
    - cd ../out/x64
    - ninja

build:msvc_win10:
  stage: build
  tags:
    - msvc2017
  script:
    - mkdir out\x64
    - cd out/x64
    - cmake ../../build -G "Visual Studio 16 2019" -A x64 -DCMAKE_CONFIGURATION_TYPES=RelWithDebInfo
    - cmake --build . --config RelWithDebInfo -- -verbosity:minimal
  artifacts:
    expire_in: 1 day
    paths:
      - bin/x64

build:clang_win10:
  stage: build
  tags:
    - msvc2017
  variables:
    CC: c:/llvm/bin/clang.exe
    CXX: c:/llvm/bin/clang++.exe
  script:
    - mkdir out\ninja
    - cd out/ninja
    - call vcvars64.bat
    - cmake ../../build -G Ninja
      -DCMAKE_BUILD_TYPE=RelWithDebInfo
      -DCMAKE_MAKE_PROGRAM=c:/apps/ninja.exe
      -DPYTHON_LIBS=optimized;c:/Python38/libs/python38.lib;debug;C:/Python38/libs/python38_d.lib
    - ninja

.virtualbox:pre_kmk:gcc:
  stage: virtualbox
  tags:
    - ubuntu
    - docker
  before_script:
    - $APT_UPDATE && $APT_INSTALL
      acpica-tools
      build-essential
      g++-multilib
      gcc-multilib
      libcap-dev
      libcurl4-openssl-dev
      libdevmapper-dev
      libidl-dev
      libelf-dev
      libopus-dev
      libpam0g-dev
      libqt5x11extras5-dev
      libsdl1.2-dev
      libsdl2-dev
      libssl-dev
      libvpx-dev
      libxml2-dev
      libxmu-dev
      linux-headers-$(uname -r)
      linux-libc-dev
      makeself
      p7zip-full
      python-dev
      qt5-default
      qttools5-dev-tools
      xsltproc
      > /dev/null
    - cd third_party/virtualbox/include
    - ln -s ../../../src/FDP
    - cd ..
    - ./configure
      --disable-hardening
      --disable-docs
      --disable-java
    - source env.sh

build:vbox_vmm:gcc:
  stage: build
  extends: .virtualbox:pre_kmk:gcc
  script:
    - kmk VBoxVMM VBOX_WITH_ADDITIONS= VBOX_WITH_TESTCASES= VBOX_WITH_TESTSUITE= VBOX_DO_STRIP=1
  except:
    - master

virtualbox:gcc:
  extends: .virtualbox:pre_kmk:gcc
  script:
    - kmk VBOX_WITH_ADDITIONS= VBOX_WITH_TESTCASES= VBOX_WITH_TESTSUITE= VBOX_DO_STRIP=1
  only:
    - master

.virtualbox:pre_kmk:msvc:
  stage: virtualbox
  tags:
    - msvc2017
  variables:
    QT_DIR: c:/qt-5.6.3
    OPENSSL_DIR: c:/OpenSSL-Win64
    CURL_DIR: c:/curl-7.64.0
  before_script:
    # build fdp dll
    - mkdir out\x64
    - cd out/x64
    - cmake ../../build -G "Visual Studio 16 2019" -A x64 -DCMAKE_CONFIGURATION_TYPES=RelWithDebInfo
    - cmake --build . --config RelWithDebInfo --target fdp -- -verbosity:minimal
    # configure virtualbox
    - set PATH=%PATH%;c:/Windows/System32
    - "cmd /C \"\"c:/Program Files/Microsoft SDKs/Windows/v7.1/Bin/SetEnv.Cmd\" /x64 /Release\""
    - cd ../../third_party/virtualbox/include
    - mklink /J FDP ..\..\..\src\FDP
    - cd ..
    - cscript configure.vbs
      --with-MinGW-w64=c:/mingw64
      --with-libSDL=c:/SDL-1.2.15
      --with-openssl=%OPENSSL_DIR%
      --with-openssl32=c:/OpenSSL-Win32
      --with-qt5=%QT_DIR%/qtbase
      --with-python=c:/Python38
      --with-libcurl=%CURL_DIR%/builds/libcurl-vc10-x64-release-dll-ipv6-sspi-winssl
      --with-libcurl32=%CURL_DIR%/builds/libcurl-vc10-x86-release-dll-ipv6-sspi-winssl
    - call env.bat

build:vbox_vmm:msvc:
  stage: build
  extends: .virtualbox:pre_kmk:msvc
  script:
    - kmk VBoxVMM VBOX_WITHOUT_HARDENING=1 VBOX_WITH_ADDITIONS= VBOX_WITH_TESTCASES= VBOX_WITH_TESTSUITE=
  except:
    - master

virtualbox:msvc:
  extends: .virtualbox:pre_kmk:msvc
  script:
    - kmk VBOX_WITHOUT_HARDENING=1 VBOX_WITH_ADDITIONS= VBOX_WITH_TESTCASES= VBOX_WITH_TESTSUITE=
    - cd out/win.amd64/release/bin
    - rm -r testcase
    - cp %QT_DIR%/qtbase/bin/Qt5Core.dll .
    - cp %QT_DIR%/qtbase/bin/Qt5Gui.dll .
    - cp %QT_DIR%/qtbase/bin/Qt5Widgets.dll .
    - cp %QT_DIR%/qtbase/bin/Qt5OpenGL.dll .
    - cp %QT_DIR%/qtbase/bin/Qt5PrintSupport.dll .
    - mkdir platforms
    - cp -r %QT_DIR%/qtbase/plugins/platforms/*.dll platforms
    - cp %OPENSSL_DIR%/bin/libcrypto-1_1-x64.dll .
    - cp %OPENSSL_DIR%/bin/libssl-1_1-x64.dll .
    - cp %CURL_DIR%/builds/libcurl-vc10-x64-release-dll-ipv6-sspi-winssl/libcurl.dll .
    - cp -r %CI_PROJECT_DIR%/third_party/virtualbox/kBuild/bin/win.amd64 kmk
    - cp -r %CI_PROJECT_DIR%/build/install.cmd .
  only:
    - master
  artifacts:
    expire_in: 1 day
    paths:
      - third_party/virtualbox/out/win.amd64/release/bin

deploy:
  stage: deploy
  tags:
    - ubuntu
    - docker
  script:
    - $APT_UPDATE && $APT_INSTALL git p7zip-full xz-utils > /dev/null
    - mkdir binaries
    - cp bin/x64/fdp.dll third_party/virtualbox/out/win.amd64/release/bin/.
    - cd third_party/virtualbox/out/win.amd64/release/bin
    - 7za a -mx=9 ../../../../../../binaries/vbox-$(git describe --long --tags)-win10.7z *
    - cd ../../../../../../bin/x64
    - 7za a -mx=9 ../../binaries/icebox-$(git describe --long --tags)-win10.7z *
  only:
    - master
  artifacts:
    paths:
      - binaries
